CREATE TYPE "workspace_member_status" AS ENUM ('active', 'suspended', 'invited');


-- workspaces table start
CREATE TABLE public.workspaces (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(255) NOT NULL UNIQUE,
    logo TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    owner_id UUID,
    CONSTRAINT fk_owner FOREIGN KEY (owner_id) REFERENCES public.users (id) ON DELETE SET NULL
);

-- COMMENT ON COLUMN public.workspaces.extra_data IS 'Add extra details for workspaces';

CREATE UNIQUE INDEX idx_workspaces_slug ON public.workspaces (slug);

ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;

GRANT ALL ON public.workspaces TO authenticated;
GRANT INSERT ON public.workspaces TO service_role;

-- workspaces table end
-- users table start
CREATE TABLE public.users (
    id UUID PRIMARY KEY REFERENCES auth.users (id) ON DELETE CASCADE,
    name TEXT,
    email VARCHAR(255) NOT NULL UNIQUE,
    avatar TEXT,
    locale TEXT,
    extra_data JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

COMMENT ON COLUMN public.users.extra_data IS 'Add extra details for users';

CREATE UNIQUE INDEX idx_users_email ON public.users (email);
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
GRANT ALL ON public.users TO authenticated;

-- users table end
-- workspace_members table start
CREATE TABLE public.workspace_members (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    workspace_id UUID NOT NULL,
    role TEXT NOT NULL,
    status public.workspace_member_status DEFAULT 'active',
    extra_data JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_workspace FOREIGN KEY (workspace_id) REFERENCES public.workspaces (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_role FOREIGN KEY (role) REFERENCES public.workspace_roles (name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE UNIQUE INDEX idx_workspace_members_workspace ON public.workspace_members (workspace_id, user_id);
ALTER TABLE public.workspace_members ENABLE ROW LEVEL SECURITY;
GRANT ALL ON public.workspace_members TO authenticated;

-- Create app_role table
CREATE TABLE public.workspace_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- example: admin, member
    name TEXT NOT NULL,
    workspace_id UUID NOT NULL,
    CONSTRAINT fk_workspace FOREIGN KEY (workspace_id) REFERENCES public.workspaces (id) ON DELETE CASCADE,
    CONSTRAINT unique_name_workspace UNIQUE (name, workspace_id)
);

-- Create app_permission table
CREATE TABLE public.workspace_permission (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- example: workspace.delete, workspace.read
    permission TEXT NOT NULL,
    role TEXT NOT NULL,
    CONSTRAINT fk_role FOREIGN KEY (role) REFERENCES public.workspace_roles (name) ON DELETE CASCADE
);

CREATE INDEX idx_workspace_permission_permission ON public.workspace_permission (permission);
CREATE INDEX idx_workspace_permission_role ON public.workspace_permission (role);
